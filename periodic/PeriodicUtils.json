{"files":[{"id":"3eacd079-ca98-489c-b04f-cb2d611a1fca","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Europe/London\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": [\n      {\n        \"userSymbol\": \"Gmail\",\n        \"version\": \"v1\",\n        \"serviceId\": \"gmail\"\n      }\n    ]\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"a3680a68-35a0-4934-951e-a3b435f42d55","name":"GmailUtil","type":"server_js","source":"class GmailUtil {\n  constructor(preferences) {\n    this.preferences \u003d preferences;\n    this.now \u003d new Date();\n    this.labels \u003d null;\n    this.gmailApiLabels \u003d null;\n    this.threads \u003d null;\n    this.gmailApiThreads \u003d null;\n  }\n\n  getThreads(interfaceName) {\n    switch (interfaceName) {\n      case (\u0027GmailApp\u0027):\n        if (this.threads \u003d\u003d\u003d null) {\n          this.threads \u003d GmailApp.search(\u0027is:all\u0027);\n        }\n        return this.threads;\n      case (\u0027Gmail\u0027):\n        if (this.gmailApiThreads \u003d\u003d\u003d null) {\n          this.gmailApiThreads \u003d Gmail.Users.Threads.list(this.preferences.userId).threads;\n        }\n        return this.gmailApiThreads;\n      default:\n        return this.getThreads(\u0027GmailApp\u0027);\n    }\n  }\n\n  refreshThreads(interfaceName) {\n    switch (interfaceName) {\n      case (\u0027GmailApp\u0027):\n        return this.gmailApiLabels \u003d Gmail.Users.Threads.list(this.preferences.userId).threads;\n      case (\u0027Gmail\u0027):\n        return this.threads \u003d GmailApp.search(\u0027is:all\u0027);\n      default:\n        return this.refreshThreads(\u0027GmailApp\u0027);\n    }\n  }\n\n  getLabels(interfaceName) {\n    switch (interfaceName) {\n      case (\u0027GmailApp\u0027):\n        if (this.labels \u003d\u003d\u003d null) {\n          this.labels \u003d GmailApp.getUserLabels();\n        }\n        return this.labels;\n      case (\u0027Gmail\u0027):\n        if (this.gmailApiLabels \u003d\u003d\u003d null) {\n          this.gmailApiLabels \u003d Gmail.Users.Labels.list(this.preferences.userId).labels;\n        }\n        return this.gmailApiLabels;\n      default:\n        return this.getLabels(\u0027GmailApp\u0027);\n    }\n  }\n\n  refreshLabels(interfaceName) {\n    switch (interfaceName) {\n      case (\u0027GmailApp\u0027):\n        return this.labels \u003d GmailApp.getUserLabels();\n      case (\u0027Gmail\u0027):\n        return this.gmailApiLabels \u003d Gmail.Users.Labels.list(this.preferences.userId).labels;\n      default:\n        return this.refreshLabels(\u0027GmailApp\u0027);\n    }\n  }\n\n  createLabel(labelName) {\n    const {\n      userId,\n      genericLabelResource\n    } \u003d this.preferences;\n\n    this.refreshLabels(\u0027Gmail\u0027);\n\n    const labels \u003d this.getLabels(\u0027Gmail\u0027);\n    var label \u003d labels.find(label \u003d\u003e label.name \u003d\u003d\u003d labelName);\n    if (!label) {\n      genericLabelResource.name \u003d labelName;\n      label \u003d Gmail.Users.Labels.create(\n        genericLabelResource,\n        userId\n      );\n    }\n    return label;\n  }\n\n  labelAs(labelName, thread) {\n    const {userId} \u003d this.preferences;\n    const label \u003d this.createLabel(labelName);\n    const labelId \u003d label.id;\n    Gmail.Users.Messages.modify({\n      \"addLabelIds\": [labelId]},\n      userId,\n      thread.getId()\n    );\n  }\n\n  updateLabel(resource, label) {\n    const {\n      userId\n    } \u003d this.preferences;\n\n    label \u003d Object.assign(label, resource);\n    \n    Gmail.Users.Labels.update(label, userId, label.id);\n  }\n\n  sublabelUpdater() {\n    const {\n      sublabelUpdater: {\n        targetLabelNames\n      }\n    } \u003d this.preferences;\n\n    const parentLabelNames \u003d Object.keys(targetLabelNames);\n\n    const labels \u003d this.getLabels(\u0027Gmail\u0027);\n\n    for (const parentLabelName of parentLabelNames) {\n      const subLabels \u003d labels.filter(label \u003d\u003e label.getName().startsWith(parentLabelName));\n\n      for (const subLabel of subLabels) {\n        try {\n          const subLabelTextColor \u003d subLabel.color.textColor;\n          const subLabelBackgroundColor \u003d subLabel.color.backgroundColor;\n        } catch (e) {\n          if (subLabel.type \u003d\u003d\u003d \u0027user\u0027) {\n            this.updateLabel(targetLabelNames[parentLabelName], subLabel);\n          }\n        }\n      }\n    }\n  }\n\n  sublabelCleaner() {\n    const {\n      sublabelCleaner: {\n        targetLabelNames,\n        warningLabelName,\n        warningLabelDay,\n        deleteDay\n      }\n    } \u003d this.preferences;\n\n    const parentLabelNames \u003d Object.keys(targetLabelNames);\n\n    GmailApp.refreshMessages;\n\n    const labels \u003d this.getLabels();\n\n    for (const label of labels)\n      if (label.getName().startsWith(`${warningLabelName}/`))\n        GmailApp.deleteLabel(label)\n\n    this.createLabel(warningLabelName);\n\n    for (const parentLabelName of parentLabelNames) {\n      const subLabels \u003d labels.filter(label \u003d\u003e label.getName().startsWith(parentLabelName));\n\n      for (const subLabel of subLabels) {\n        targetLabelNames[parentLabelName].push(subLabel.getName());\n\n        const threads \u003d subLabel.getThreads();\n\n        for (const thread of threads) {\n          const threadDay \u003d Math.floor((this.now.getTime() - thread.getLastMessageDate().getTime()) / 86400000);\n          const threadLabels \u003d thread.getLabels();\n          var exception \u003d false;\n\n          if (threadDay \u003c warningLabelDay || thread.isInTrash())\n            continue\n          if (threadLabels.some(label \u003d\u003e !targetLabelNames[parentLabelName].includes(label.getName()))) {\n            this.labelAs(`${warningLabelName}/exception:unexpected-labels`, thread);\n            exception \u003d true;\n          }\n          if (thread.hasStarredMessages()) {\n            this.labelAs(`${warningLabelName}/exception:starred-messages`, thread);\n            exception \u003d true;\n          }\n          if (thread.isUnread()) {\n            this.labelAs(`${warningLabelName}/exception:unread-messages`, thread);\n            exception \u003d true;\n          }\n          if (exception \u003d\u003d\u003dtrue)\n            continue\n          \n          if (threadDay \u003c deleteDay)\n            this.labelAs(`${warningLabelName}/${deleteDay - threadDay} days left`, thread)\n          else\n            thread.moveToTrash()\n        }\n\n        targetLabelNames[parentLabelName] \u003d targetLabelNames[parentLabelName]\n          .filter(labelName \u003d\u003e labelName !\u003d\u003d subLabel.getName());\n      }\n    }\n  }\n}\n"},{"id":"34b0b630-0aa7-4a55-b5d7-b9314e3877e0","name":"Main","type":"server_js","source":"function day() {\n  GmailUtil.sublabelCleaner();\n}\n\nfunction hour() {\n  GmailUtil.sublabelUpdater();\n}\n"},{"id":"8bb5ad91-26d6-4933-a592-72860339f4f7","name":"Preferences","type":"server_js","source":"/**\n * The hierarchical preferences.\n * \u003cp\u003e\n * Used by functions called in the function body of \u003ccode\u003emain()\u003c/code\u003e in \u003ccode\u003eMain\u003c/code\u003e.\n * \n * @see Main#main()\n */\nconst preferences \u003d {\n  gmailUtil: {\n    userId: \u0027me\u0027,\n    genericLabelResource: {\n      labelListVisibility: \u0027labelHide\u0027,\n      messageListVisibility: \u0027show\u0027,\n      color: {\n        textColor: \u0027#ffffff\u0027,\n        backgroundColor: \u0027#434343\u0027\n      }\n    },\n    sublabelCleaner:{\n      /**\n       * The expected label names for each parent label name.\n       * \u003cp\u003e\n       * Subdirectories of the parent label are recursively cleaned up by \n       * \u003ccode\u003egmailSublabelCleaner()\u003c/code\u003e.\n       * \u003cp\u003e\n       * Example:\n       * \u003ccode\u003e\n       * targetLabelNames: {\n       *   \u0027uol/ntfy\u0027: [\u0027uol\u0027],\n       *   \u0027pm/acc\u0027: [\u0027pm\u0027]\n       * },\n       * \u003c/code\u003e\n       * @see GmailUtils#sublabelCleaner()\n       */\n      targetLabelNames: {\n        \u0027uol/ntfy\u0027: [\u0027uol\u0027],\n        \u0027pm/acc\u0027: [\u0027pm\u0027]\n      },\n      warningLabelName: \u0027pending-delete\u0027,\n      warningLabelDay: 14,\n      deleteDay: 21\n    },\n    sublabelUpdater: {\n      targetLabelNames: {\n        \u0027active\u0027: {\n          labelListVisibility: \u0027labelHide\u0027,\n          color: {\n            textColor: \u0027#822111\u0027,\n            backgroundColor: \u0027#ffad47\u0027\n          }\n        },\n        \u0027archive`\u0027: {\n          labelListVisibility: \u0027labelHide\u0027,\n          messageListVisibility: \u0027show\u0027,\n          color: {\n            textColor: \u0027#ffffff\u0027,\n            backgroundColor: \u0027#434343\u0027\n          }\n        }\n      }\n    }\n  }\n};\n"},{"id":"33a74168-43f9-4085-98d1-a574347d15ff","name":"InstanceManager","type":"server_js","source":"GmailUtil \u003d new GmailUtil(preferences.gmailUtil);\n"}]}